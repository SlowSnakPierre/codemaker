name: Release Management

on:
    workflow_dispatch:
        inputs:
            version:
                description: "Version to release"
                required: true
                type: string
            type:
                description: "Type of release"
                required: true
                type: choice
                options:
                    - stable
                    - beta
                    - alpha

jobs:
    create-release:
        runs-on: ubuntu-latest
        outputs:
            tag: ${{ steps.tag.ouputs.tag }}
            version: ${{ steps.tag.outputs.version }}
        steps:
            - uses: actions/checkout@v4
              with:
                  fetch-depth: 0
                  token: ${{ secrets.RELEASE_TOKEN }}

            - name: Setup Node.js
              uses: actions/setup-node@v4
              with:
                  node-version: "18"
                  cache: "npm"

            - name: Configure Git
              run: |
                  git config user.name "github-actions[bot]"
                  git config user.email "github-actions[bot]@users.noreply.github.com"

            - name: Set version and create tag
              id: tag
              run: |
                  VERSION="${{ github.event.inputs.version }}"
                  RELEASE_TYPE="${{ github.event.inputs.type }}"

                  # Ajouter suffixe selon type
                  if [ "$RELEASE_TYPE" = "beta" ]; then
                      VERSION="${VERSION}-beta"
                  elif [ "$RELEASE_TYPE" = "alpha" ]; then
                      VERSION="${VERSION}-alpha"
                  fi

                  TAG="v$VERSION"

                  echo "version=$VERSION" >> $GITHUB_OUTPUT
                  echo "tag=$TAG" >> $GITHUB_OUTPUT

                  # R√©cup√©rer le tag pr√©c√©dent pour les notes de release
                  PREV_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
                  if [ -z "$PREV_TAG" ]; then
                      # Si aucun tag pr√©c√©dent, utiliser le premier commit
                      PREV_TAG=$(git rev-list --max-parents=0 HEAD)
                  fi
                  echo "prev_tag=$PREV_TAG" >> $GITHUB_OUTPUT

            - name: Update package.json
              run: |
                  # V√©rifier si package.json existe
                  if [ -f "package.json" ]; then
                    npm version ${{ steps.tag.outputs.version }} --no-git-tag-version
                    git add package.json
                    # Ajouter package-lock.json seulement s'il existe
                    if [ -f "package-lock.json" ]; then
                      git add package-lock.json
                    fi
                    git commit -m "chore(release): version ${{ steps.tag.outputs.version }}"
                  else
                    echo "No package.json found, skipping version update"
                  fi

            - name: Generate Release Notes
              id: changelog
              run: |
                  # G√©n√©rer les notes de version
                  {
                    echo "## Changements dans la version ${{ steps.tag.outputs.version }}"
                    echo ""
                    
                    # Nouvelles fonctionnalit√©s
                    echo "### ‚ú® Nouvelles fonctionnalit√©s"
                    FEAT_COMMITS=$(git log ${{ steps.tag.outputs.prev_tag }}..HEAD --pretty=format:"- %s" --grep="^feat" || echo "")
                    if [ -n "$FEAT_COMMITS" ]; then
                      echo "$FEAT_COMMITS"
                    else
                      echo "Aucune nouvelle fonctionnalit√©"
                    fi
                    
                    # Corrections
                    echo ""
                    echo "### üêõ Corrections"
                    FIX_COMMITS=$(git log ${{ steps.tag.outputs.prev_tag }}..HEAD --pretty=format:"- %s" --grep="^fix" || echo "")
                    if [ -n "$FIX_COMMITS" ]; then
                      echo "$FIX_COMMITS"
                    else
                      echo "Aucune correction"
                    fi
                    
                    # Performance
                    echo ""
                    echo "### ‚ö° Performance"
                    PERF_COMMITS=$(git log ${{ steps.tag.outputs.prev_tag }}..HEAD --pretty=format:"- %s" --grep="^perf" || echo "")
                    if [ -n "$PERF_COMMITS" ]; then
                      echo "$PERF_COMMITS"
                    else
                      echo "Aucune am√©lioration de performance"
                    fi
                    
                    # Si c'est une version majeure, inclure les changements importants
                    if [[ "${{ steps.tag.outputs.version }}" =~ ^[0-9]+\.0\.0 ]]; then
                      echo ""
                      echo "### ‚ö†Ô∏è Changements majeurs"
                      BREAKING_CHANGES=$(git log ${{ steps.tag.outputs.prev_tag }}..HEAD --pretty=format:"- %b" | grep "BREAKING CHANGE:" || echo "")
                      if [ -n "$BREAKING_CHANGES" ]; then
                        echo "$BREAKING_CHANGES"
                      else
                        echo "Aucun changement majeur"
                      fi
                    fi
                  } > RELEASE_NOTES.md

                  # Sauvegarder pour GitHub Actions avec d√©limiteur EOF s√©curis√©
                  echo "notes<<RELEASE_NOTES_EOF" >> $GITHUB_OUTPUT
                  cat RELEASE_NOTES.md >> $GITHUB_OUTPUT
                  echo "RELEASE_NOTES_EOF" >> $GITHUB_OUTPUT

            - name: Create Git Tag
              run: |
                  git tag -a "${{ steps.tag.outputs.tag }}" -m "Release ${{ steps.tag.outputs.version }}"
                  git push origin "${{ steps.tag.outputs.tag }}"
                  git push origin HEAD

            - name: Create GitHub Release
              uses: softprops/action-gh-release@v2
              with:
                  tag_name: ${{ steps.tag.outputs.tag }}
                  name: "Release ${{ steps.tag.outputs.version }}"
                  body: ${{ steps.changelog.outputs.notes }}
                  draft: false
                  prerelease: ${{ github.event.inputs.type != 'stable' }}
                  token: ${{ secrets.RELEASE_TOKEN }}

    build:
        needs: create-release
        uses: ./.github/workflows/electron-build.yml
        with:
            tag: ${{ needs.create-release.outputs.tag }}
        secrets: inherit
